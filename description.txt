Backend and API Automation Testing 
You are tasked with automating the testing of an API that allows CRUD operations on user accounts (e.g., create, retrieve, update, delete a user). The API is defined using OpenAPI. 
Task Requirements 
Using the OpenAPI definition provided, implement automated tests for the following scenarios: 
1. Create User: Test for successful creation of a user with valid data. 
2. Get User by ID: Test retrieving an existing user by their ID. 
3. Invalid User Creation: Ensure invalid input (e.g., missing required fields) is handled with proper error messages. 
4. Update User: Test updating user details and verify the changes. 
5. Delete User: Test deleting an existing user and validate that the user is no longer retrievable. 
6. Edge Cases: Handle cases like trying to retrieve, update, or delete a non-existing user. 
Use any automation framework and language you prefer. At Mintos we use PHP with CodeCeption for writing the API tests and Cucumber for writing BDD-style tests in our Java projects. 
Bonus (Optional) 
1. Add tests for performance, security (e.g., checking unauthorized access). 2. Write data-driven tests that validate different input combinations. 
3. Containerization for setup 
Evaluation criteria 
1. Feature-completeness 
2. Code quality, structure 
3. Ease of setup 
Please send the code as a link to a repository on some public VCS service (e.g., GitHub) and instructions on how to set it up once completed.

API Definition 
Unset 
openapi: 3.0.0 
info: 
version: 1.0.0 
title: User Account API 
description: API for managing user accounts with personal identification details. 
servers: 
- url: http://localhost:8080/api 
paths: 
/users: 
post: 
summary: Create a new user 
security: 
- basicAuth: [] 
requestBody: 
content: 
application/json: 
schema: 
$ref: '#/components/schemas/User' 
responses: 
'201': 
description: User created successfully 
'400': 
description: Invalid input 
content: 
application/problem+json: 
schema: 
$ref: '#/components/schemas/ProblemDetails' 
get: 
summary: Get all users 
security: 
- basicAuth: [] 
responses: 
'200': 
description: A list of users 
content: 
application/json: 
schema: 
type: array 
items:
$ref: '#/components/schemas/User' 
/users/{id}: 
get: 
summary: Get a user by ID 
security: 
- basicAuth: [] 
parameters: 
- in: path 
name: id 
schema: 
type: string 
required: true 
responses: 
'200': 
description: A single user 
content: 
application/json: 
schema: 
$ref: '#/components/schemas/User' 
'404': 
description: User not found 
content: 
application/problem+json: 
schema: 
$ref: '#/components/schemas/ProblemDetails' put: 
summary: Update a user by ID 
security: 
- basicAuth: [] 
parameters: 
- in: path 
name: id 
schema: 
type: string 
required: true 
requestBody: 
content: 
application/json: 
schema: 
$ref: '#/components/schemas/User' 
responses: 
'200': 
description: User updated successfully 
'400':
description: Invalid input 
content: 
application/problem+json: 
schema: 
$ref: '#/components/schemas/ProblemDetails' 
'404': 
description: User not found 
content: 
application/problem+json: 
schema: 
$ref: '#/components/schemas/ProblemDetails' 
delete: 
summary: Delete a user by ID 
security: 
- basicAuth: [] 
parameters: 
- in: path 
name: id 
schema: 
type: string 
required: true 
responses: 
'204': 
description: User deleted successfully 
'404': 
description: User not found 
content: 
application/problem+json: 
schema: 
$ref: '#/components/schemas/ProblemDetails' 
components: 
securitySchemes: 
basicAuth: 
type: http 
scheme: basic 
schemas: 
User: 
type: object 
required: 
- firstName 
- lastName 
- dateOfBirth 
- personalIdDocument
properties: 
id: 
type: string 
description: Unique identifier for the user 
firstName: 
type: string 
description: User's first name 
minLength: 2 
maxLength: 50 
lastName: 
type: string 
description: User's last name 
minLength: 2 
maxLength: 50 
email: 
type: string 
format: email 
description: User's email address 
dateOfBirth: 
type: string 
format: date 
description: User's date of birth in YYYY-MM-DD format 
personalIdDocument: 
type: object 
description: Personal identification document details 
required: 
- documentId 
- countryOfIssue 
- validUntil 
properties: 
documentId: 
type: string 
description: Personal document identifier 
minLength: 5 
maxLength: 20 
countryOfIssue: 
type: string 
description: The country that issued the document (ISO 3166-1 alpha-2) 
pattern: "^[A-Z]{2}$" 
validUntil: 
type: string 
format: date 
description: The document's validity term (expiration date)
example: 
id: "123456" 
firstName: "John" 
lastName: "Doe" 
email: "john.doe@example.com" 
dateOfBirth: "1985-10-01" 
personalIdDocument: 
documentId: "AB123456" 
countryOfIssue: "US" 
validUntil: "2030-12-31" 
ProblemDetails: 
type: object 
description: Standardized error response object as per RFC 7807 properties: 
type: 
type: string 
format: uri 
description: A URI reference to the type of error (optional) title: 
type: string 
description: A short, human-readable summary of the problem status: 
type: integer 
format: int32 
description: HTTP status code generated by the origin server detail: 
type: string 
description: A detailed description of the problem 
instance: 
type: string 
format: uri 
description: A URI reference to the specific instance of the problem required: 
- title 
- status 
example: 
type: "https://example.com/validation-error" 
title: "Invalid Input" 
status: 400 
detail: "The countryOfIssue must be an ISO 3166-1 alpha-2 code." instance: "/users"
